import numpy as np
import util
import modop
from tqdm.auto import tqdm

MEAN_FREE_PROD = 0
ABS_DIFF = 1



def build_opf_table_reduction(reduction, fix0=True, mode=MEAN_FREE_PROD, Beta=None):
    
    if reduction.o_dtype is None: raise ValueError(f'reduction.o_dtype cant be None.')
    if mode != MEAN_FREE_PROD and mode != ABS_DIFF: raise ValueError(f'{mode} is not a valid mode among (MEAN_FREE_PROD,ABS_DIFF)')

    dtype = reduction.o_dtype
    hw_dtype = util.s2u(dtype)


    table = np.zeros(reduction.q)

    A = np.arange(reduction.q, dtype=dtype)
    A = reduction.reduce(A)

    A_hw = util.hw(A, hw_dtype, Beta)

    if mode == MEAN_FREE_PROD:
        e_A_hw = A_hw.mean()
        s_A_hw = A_hw - e_A_hw

    nums = np.zeros(reduction.q, dtype=dtype)
    nums = reduction.reduce(nums)

    for i in tqdm(range(len(A))):
        num = A[i]

        nums[:] = num

        B = (nums - A)
        B = reduction.reduce(B)

        assert ((nums % reduction.q) == (A + B) % reduction.q).all()
        B_hw = util.hw(B, hw_dtype, Beta)

        if mode == MEAN_FREE_PROD:
            e_B_hw = B_hw.mean()
            s_B_hw = B_hw - e_B_hw
            product = s_A_hw * s_B_hw
        elif mode == ABS_DIFF:
            product = np.abs(A_hw - B_hw)

        table[num] = product.mean()


    if fix0:
        if mode == MEAN_FREE_PROD:
            table[0] = e_A_hw**2 # (util.u22b(hw_dtype) * util.u22b(hw_dtype)) / 4
        elif mode == ABS_DIFF:
            table[0] = 0

    return table



def opf_table_set0(table, reduction, mode=MEAN_FREE_PROD, Beta=None):

    if reduction.o_dtype is None: raise ValueError(f'reduction.o_dtype cant be None.')
    if mode != MEAN_FREE_PROD and mode != ABS_DIFF: raise ValueError(f'{mode} is not a valid mode among (MEAN_FREE_PROD,ABS_DIFF)')

    dtype = reduction.o_dtype
    hw_dtype = util.s2u(dtype)

    A = np.arange(reduction.q, dtype=dtype)
    A = reduction.reduce(A)

    A_hw = util.hw(A, hw_dtype, Beta)

    if mode == MEAN_FREE_PROD:
        table[0] = (A_hw.mean())**2
    elif mode == ABS_DIFF:
        table[0] = 0



def build_opf_error_table_reduction(reduction, Beta=None):

    #dedicated to mean-free product

    B = util.u2b(util.s2u(reduction.o_dtype)) if Beta is None else Beta
    hw_dtype = util.s2u(reduction.o_dtype)


    M = util.hw(np.arange(reduction.q//2 + 1, dtype=reduction.o_dtype), dtype=hw_dtype, B=Beta).mean()
    M_ = B - M
    X_0 = reduction.reduce(np.arange(reduction.q, dtype=reduction.o_dtype))
    X_0_HW = util.hw(X_0, dtype=hw_dtype, B=Beta)
    e0 = np.zeros(reduction.q, dtype='float')
    M0 = np.zeros(reduction.q, dtype='float')
    e0[X_0 >= 0] = X_0_HW[X_0 >= 0] - M
    e0[X_0 < 0] = X_0_HW[X_0 < 0] - M_
    M0[X_0 >= 0] = M - B/2
    M0[X_0 < 0] = B/2 - M

    table = np.arange(reduction.q, dtype='float')
    e1 = np.zeros(reduction.q, dtype='float')

    for X in tqdm(range(reduction.q)):

        X_1 = reduction.reduce(X - X_0)
        X_1_HW = util.hw(X_1, dtype=hw_dtype, B=Beta)
        e1[X_1 >= 0] = X_1_HW[X_1 >= 0] - M
        e1[X_1 < 0] = X_1_HW[X_1 < 0] - M_

        T = 4*(M - B/2)*((X_1 >= 0)*e0).mean()
        table[X] = (e0*e1).mean() + T

    return table



def build_opf_table_reduction_ff(reduction, fn_e0e1, fn_e0s1, Beta=None):

    #dedicated to mean-free product


    table_0 = util.read_doubles_to_list(fn_e0e1)
    table_1 = util.read_doubles_to_list(fn_e0s1)

    B = util.u2b(util.s2u(reduction.o_dtype)) if Beta is None else Beta
    hw_dtype = util.s2u(reduction.o_dtype)


    M = util.hw(np.arange(reduction.q//2 + 1, dtype=reduction.o_dtype), dtype=hw_dtype, B=Beta).mean()
    X_0 = reduction.reduce(np.arange(reduction.q, dtype=reduction.o_dtype))
    table = np.arange(reduction.q, dtype='float')

    for X in X_0:

        T1 = table_0[X] + 4*(M - B/2)*table_1[X]
        T = (M - B/2)**2
        table[X] = (2*(T)*(2/reduction.q)*np.abs(X)) - T + T1

    return table