import numpy as np

RR_Q2Q2 = 0
RR_0Q = 2


class Reduction():

    def __init__(self, q, o_dtype=None):
        if o_dtype is not None:
            try:
                o_dtype = np.dtype(o_dtype)
            except TypeError:
                raise ValueError(f'{o_dtype} is not a valid dtype.')
        
        self.q = q
        self.o_dtype = o_dtype

    def _reduce(self, data):
        pass

    def reduce(self, data):
        if self.o_dtype is None:
            return self._reduce(data)
        else:
            return self._reduce(data).astype(self.o_dtype)

    def _id(self):
        pass

    @property
    def id(self):
        return self._id()

    def __str__(self):
        pass

class Reduction_Q2Q2(Reduction):
    
    def _reduce(self, data):
        data = data % self.q
        return data - (data > self.q//2)*self.q

    def _id(self):
        return RR_Q2Q2

    def __str__(self):
        return '[-q/2,q/2]'


class Reduction_0Q(Reduction):
    
    def _reduce(self, data):
        return data % self.q

    def _id(self):
        return RR_0Q

    def __str__(self):
        return '[0,q)'