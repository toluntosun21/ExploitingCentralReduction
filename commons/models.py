import scared
import numpy as np
import opf
import util

class SignedHammingWeight(scared.HammingWeight):
    """Signed Hamming Weight leakage model class.

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """
    def __init__(self, expected_dtype='uint16'):
        super().__init__(expected_dtype=expected_dtype)

    def _compute(self, data, axis):
        return super()._compute(data.astype(self.expected_dtype), axis)

    def __str__(self):
        return 'Signed Hamming Weight'


class PackedHammingWeight(scared.HammingWeight):
    """Packed Hamming Weight leakage model class.

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """
    def __init__(self, expected_dtype='uint16'):
        super().__init__(expected_dtype=expected_dtype)

    def _compute(self, data, axis):
        return super()._compute(data[...,::2].astype(self.expected_dtype), axis) + super()._compute(data[...,1::2].astype(self.expected_dtype), axis)

    @property
    def max_data_value(self):
        return super().max_data_value() * 2

    def __str__(self):
        return 'Packed Hamming Weight'


class AbsoluteValueTuned(scared.Model):
    """Absolute Value leakage model class, tuned w.r.t. OPF.

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """
    def __init__(self, reduction):
        self.q = reduction.q
        self.A = -opf.opf_table_reduction_num(1, reduction=reduction)
        self.B = (reduction.q//2) / (opf.opf_table_reduction_num(-(reduction.q//2), reduction=reduction) + self.A)

    def _compute(self, data, axis):
        temp = np.abs(data)/self.B - self.A
        temp[temp == -self.A] = 0
        return temp

    @property
    def max_data_value(self):
        raise Exception('Unimplemented method, AbsoluteValueTuned.max_data_value()')

    def __str__(self):
        return 'Absolute Value Tuned'


class AbsoluteValueAlternative(scared.Model):
    """Alternative Absolute Value leakage model class

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """
    def __init__(self, reduction):
        self.q = reduction.q
        A = util.hw(np.arange(self.q//2, dtype=reduction.o_dtype)).mean()
        B = util.u2b(util.s2u(reduction.o_dtype)) / 2
        self.T = (A - B)**2
        self.zero = (((B * B) / 4) +  self.T)/(2*(self.T)*(2/self.q))


    def _compute(self, data, axis):
        temp = np.abs(data)
        temp[data == 0] = self.zero
        return temp

    @property
    def max_data_value(self):
        raise Exception('Unimplemented method, AbsoluteValueAlternative.max_data_value()')

    def __str__(self):
        return 'Absolute Value Alternative'


class AbsoluteValue(scared.Model):
    """Absolute Value leakage model class.

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """

    def _compute(self, data, axis):
        return np.abs(data)

    @property
    def max_data_value(self):
        raise Exception('Unimplemented method, AbsoluteValue.max_data_value()')

    def __str__(self):
        return 'Absolute Value'


class SumOfSquares(scared.Model):
    """Sum of Squares leakage model class.

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """

    def _compute(self, data, axis):
        return (data[...,1::2].astype('int64')**2) + (data[...,::2].astype('int64')**2)

    @property
    def max_data_value(self):
        raise Exception('Unimplemented method, SumOfSquare.max_data_value()')

    def __str__(self):
        return 'Sum of Squares'


class RangePower(scared.Model):
    """Range power model class.

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """
    def __init__(self, T):
        self.T = T

    def _compute(self, data, axis):
        return (np.abs(data) < self.T)

    @property
    def max_data_value(self):
        return 1

    def __str__(self):
        return 'Range power model'


class OPF_ModularReduction(scared.Model):
    """Optimal Prediction Function for Reduction Algorithms.

    Instances of this class are callables which takes a data numpy array as input and returns it unchanged.

    Args:
        data (numpy.ndarray): numeric numpy ndarray

    Returns:
        (numpy.ndarray): unchanged input data numpy ndarray.

    """
    def __init__(self, reduction=None, fix0=True, table=None):
        self.table = opf.build_opf_table_reduction(reduction, fix0) if table is None else table
        if table is not None and fix0:
            opf.opf_table_set0(self.table, reduction)


    def _compute(self, data, axis):
        return self.table[data]

    @property
    def max_data_value(self):
        raise Exception('Unimplemented method, OPF.max_data_value()')

    def __str__(self):
        return 'Optimal Prediction Function'