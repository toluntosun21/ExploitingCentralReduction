import numpy as np


def hw(a, dtype='uint32', B=None):
    b = np.zeros(a.shape, dtype=dtype)
    if B is None:
        B = np.dtype(dtype).itemsize*8
    for i in range(B):
        b += (a.astype(dtype) >> i) & 0x1
    return b


def succ_ratio(key, q, conv, distinguisher, accept_neg=True, clear_nan_inf=True):
    succs = []

    if clear_nan_inf:
        distinguisher.convergence_traces[np.isnan(distinguisher.convergence_traces)] = 0
        distinguisher.convergence_traces[np.isinf(distinguisher.convergence_traces)] = 0

    for key_index in range(distinguisher.convergence_traces.shape[1]):
        N_t = conv
        for j in range(distinguisher.convergence_traces.shape[2]):
            s = (distinguisher.convergence_traces[:,key_index,j].argsort()[::-1][0]) % q
            if (key[key_index] == s) or (accept_neg and (q - key[key_index]) == s):
                succs.append(N_t)
                break
            N_t += conv
    
    succs_np = np.array(succs)
    succ_ratios = []

    for j in range(distinguisher.convergence_traces.shape[2]):
        N_t = (j + 1)*conv
        succ_ratios.append((succs_np <= N_t).sum() / distinguisher.convergence_traces.shape[1])

    return succ_ratios


def read_doubles_to_list(filename):
    with open(filename, 'r') as file:
        table = [float(line.strip()) for line in file]
    return np.array(table)


def unpack_guess(guess, q):
    return guess%q, guess//q

def pack_guess(low, high, q):
    return high*q + low


def print_scores_packed(ki, scores, q, scores_sorted=None, l=10):
    if scores_sorted is None:
        scores_sorted = scores.argsort()[::-1]

    for i in range(l):
        print(ki, i, unpack_guess(scores_sorted[i], q), scores[scores_sorted[i]])
    print()

'''
******************** NumPy Data Type Conversions ********************************
'''

def s2u(dtype):
    if dtype == 'int32':
        return 'uint32'
    elif dtype == 'int16':
        return 'uint16'
    elif dtype == 'int64':
        return 'uint64'
    elif dtype == 'int8':
        return 'uint8'
    else: raise Exception(f'Invalid dtype {dtype}')


def u2s(dtype):
    if dtype == 'uint32':
        return 'int32'
    elif dtype == 'uint16':
        return 'int16'
    elif dtype == 'uint64':
        return 'int64'
    elif dtype == 'uint8':
        return 'int8'
    else: raise Exception(f'Invalid dtype {dtype}')


def u22u(dtype):
    if dtype == 'uint32':
        return 'uint64'
    elif dtype == 'uint16':
        return 'uint32'
    elif dtype == 'uint8':
        return 'uint16'
    else: raise Exception(f'Invalid dtype {dtype}')


def s22s(dtype):
    if dtype == 'int32':
        return 'int64'
    elif dtype == 'int16':
        return 'int32'
    elif dtype == 'int8':
        return 'int16'
    else: raise Exception(f'Invalid dtype {dtype}')


def u2b(dtype):
    if dtype == 'uint32':
        return 32
    elif dtype == 'uint16':
        return 16
    elif dtype == 'uint8':
        return 8
    else: raise Exception(f'Invalid dtype {dtype}')