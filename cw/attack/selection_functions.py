import kyber
import scared
import numpy as np
import util


######################################### CIPHERTEXT IDENTITY ###############################################


@scared.reverse_selection_function
def c_id(c):
    return c


#############################################################################################################
########################################### MONTGOMERY ######################################################

########################################## REVERSE ##########################################################

@scared.reverse_selection_function
def basemul_monty_low(c, s):
    return kyber.ntt.basemul_monty_low(c, s)


@scared.reverse_selection_function
def basemul_monty_high(c, s):
    return kyber.ntt.basemul_monty_high(c, s)


@scared.reverse_selection_function
def basemul_monty(c, s):
    return kyber.ntt.basemul_monty(c, s)


@scared.reverse_selection_function
def basemul_monty_low_c(c, s):
    return kyber.central_reduce(kyber.ntt.basemul_monty_low(c, s))


@scared.reverse_selection_function
def basemul_monty_high_c(c, s):
    return kyber.central_reduce(kyber.ntt.basemul_monty_high(c, s))


@scared.reverse_selection_function
def basemul_monty_c(c, s):
    return kyber.central_reduce(kyber.ntt.basemul_monty(c, s))


def make_basemul_monty_low_c(key_index, s_):
    @scared.reverse_selection_function
    def basemul_low(c):
        return kyber.central_reduce(kyber.ntt.basemul_monty_low(c[:,key_index*2:key_index*2 + 2], s_, range(key_index, key_index+1)))
    return basemul_low


def make_basemul_monty_high_c(key_index, s_):
    @scared.reverse_selection_function
    def basemul_high(c):
        return kyber.central_reduce(kyber.ntt.basemul_monty_high(c[:,key_index*2:key_index*2 + 2], s_))
    return basemul_high


def make_basemul_monty_c(key_index, s_):
    @scared.reverse_selection_function
    def basemul(c):
        return kyber.central_reduce(kyber.ntt.basemul_monty(c[:,key_index*2:key_index*2 + 2], s_, range(key_index, key_index+1)))
    return basemul


########################################## ATTACK ##########################################################


def make_basemul_monty_attack_low_c(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul_low(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses)), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.central_reduce(kyber.ntt.basemul_monty_low(c[:,key_index*2:key_index*2 + 2], guess_, range(key_index, key_index+1)))[:,0]
        return res
    return basemul_low


def make_basemul_monty_attack_high_c(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul_high(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses)), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.central_reduce(kyber.ntt.basemul_monty_high(c[:,key_index*2:key_index*2 + 2], guess_))[:,0]
        return res
    return basemul_high


def make_basemul_monty_attack_c(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses), 2), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.central_reduce(kyber.ntt.basemul_monty(c[:,key_index*2:key_index*2 + 2], guess_, range(key_index, key_index+1)))[:,2]
        return res
    return basemul



def make_basemul_monty_attack_low(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul_low(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses)), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.ntt.basemul_monty_low(c[:,key_index*2:key_index*2 + 2], guess_, range(key_index, key_index+1))[:,0]
        return res
    return basemul_low


def make_basemul_monty_attack_high(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul_high(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses)), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.ntt.basemul_monty_high(c[:,key_index*2:key_index*2 + 2], guess_)[:,0]
        return res
    return basemul_high


def make_basemul_monty_attack(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses),2), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.ntt.basemul_monty(c[:,key_index*2:key_index*2 + 2], guess_, range(key_index, key_index+1))[:,:2]
        return res
    return basemul


############################################################################################################
########################################### PLANTARD #######################################################

########################################## REVERSE #########################################################

@scared.reverse_selection_function
def basemul_plant_low(c, s):
    return kyber.ntt.basemul_plant_low(c, s)


@scared.reverse_selection_function
def basemul_plant_high(c, s):
    return kyber.ntt.basemul_plant_high(c, s)


@scared.reverse_selection_function
def basemul_plant(c, s):
    return kyber.ntt.basemul_plant(c, s)


def make_basemul_plant_low(key_index, s_):
    @scared.reverse_selection_function
    def basemul_low(c):
        return kyber.ntt.basemul_plant_low(c[:,key_index*2:key_index*2 + 2], s_, range(key_index, key_index+1))
    return basemul_low


def make_basemul_plant_high(key_index, s_):
    @scared.reverse_selection_function
    def basemul_high(c):
        return kyber.ntt.basemul_plant_high(c[:,key_index*2:key_index*2 + 2], s_)
    return basemul_high


def make_basemul_plant(key_index, s_):
    @scared.reverse_selection_function
    def basemul(c):
        return kyber.ntt.basemul_plant(c[:,key_index*2:key_index*2 + 2], s_, range(key_index, key_index+1))
    return basemul


########################################## ATTACK ###########################################################


def make_basemul_plant_attack_low(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul_low(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses)), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.ntt.basemul_plant_low(c[:,key_index*2:key_index*2 + 2], guess_, range(key_index, key_index+1))[:,0]
        return res
    return basemul_low


def make_basemul_plant_attack_high(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul_high(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else ange(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses)), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.ntt.basemul_plant_high(c[:,key_index*2:key_index*2 + 2], guess_)[:,0]
        return res
    return basemul_high


def make_basemul_plant_attack(key_index, neg_trick=True):
    @scared.attack_selection_function
    def basemul(c, guesses):
        guesses = range(kyber.q * (kyber.q//2 + 1)) if neg_trick else range(kyber.q * kyber.q)
        res = np.empty((c.shape[0], len(guesses), 2), dtype='int16')
        for i, guess in enumerate(guesses):
            low, high = util.unpack_guess(guess, kyber.q)
            guess_ = np.array([[low, high]], dtype='int16')
            res[:, i] = kyber.ntt.basemul_plant(c[:,key_index*2:key_index*2 + 2], guess_, range(key_index, key_index+1))[:,:2]
        return res
    return basemul